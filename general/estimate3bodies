#!/usr/local/bin/python3
import sys
import os
import numpy as np
from scipy.special import comb
import copy
#import scipy
from collections import Counter
from matplotlib import pyplot as plt
from itertools import combinations
#from scipy.interpolate import make_interp_spline
from datetime import datetime

"""
Code written Jun 2020.
Scans 2-body terms and estimates how many 3-body terms would be computed per 
cutoff for both an all-terms computation and split.
"""

n=0
e_start_S=[]
e_start_T=[]
e_end_S=[]
e_end_T=[]
e_energies_S=[]
e_energies_T=[]
n3_elements_S=[]
n3_elements_T=[]
constit_start_S=[]
constit_start_T=[]
constit_end_S=[]
constit_end_T=[]
constit_count_S=[]
constit_count_T=[]
n3_constit_S=[]
n3_constit_T=[]
n4_constit_S=[]
n4_constit_T=[]
n_wise_terms_S=[]
n_wise_terms_T=[]
n_wise_energies_S=[]
n_wise_energies_T=[]
n_wise_totals_S=[]
n_wise_totals_T=[]
e_ref_S=0
e_ref_T=0
next_line=False
ncore=0

# Read files, set line flags, and search for energies
#print ('---Singlet Scan---')
with open(sys.argv[1]) as output_file_S:
    for i,line in enumerate(output_file_S):
        if ('IFCI_TUPLES') in line:
            nlevel_split = line.split()
            n = int(nlevel_split[1])
            print ('Highest increment level detected as', n)
        if ('Now Correlate') in line:
            n_wise_terms_S.append(int(line.split()[4]))
        #if ('now printing pairwise constituents') in line:
        #    constit_start_S.append(i)
        #if (next_line):
        #    total_split = line.split()
        #    n_wise_totals_S.append(float(total_split[-1]))
        #    next_line = False
        for inc in range(1,n+1):
            if ('E%icx:' % inc) in line:
                e_start_S.append(i)
            if ('E%icxt:' % inc) in line:
                e_end_S.append(i)
        #        next_line = True
            if ('E%i total E' % inc) in line:
                e_split = line.split()
                n_wise_energies_S.append(float(e_split[3]))
        if ('Eref(CAS-CI)') in line:
            e_ref_split = line.split()
            e_ref_S = float(e_ref_split[1])
        if ('core:') in line:
            core_split = line.split()
            ncore = core_split[5]
#print (n_wise_energies_S)

#print ('---Triplet Scan---')
#with open(sys.argv[2]) as output_file_T:
#    for i,line in enumerate(output_file_T):
#        if ('Now Correlate') in line:
#            n_wise_terms_T.append(int(line.split()[4]))
#        if ('now printing pairwise constituents') in line:
#            constit_start_T.append(i)
#        #if (next_line):
#        #    total_split = line.split()
#        #    n_wise_totals_T.append(float(total_split[-1]))
#        #    next_line = False
#        for inc in range(1,n+1):
#            if ('E%icx:' % inc) in line:
#                e_start_T.append(i)
#            if ('E%icxt:' % inc) in line:
#                e_end_T.append(i)
#        #        next_line = True
#            if ('E%i total E' % inc) in line:
#                e_split = line.split()
#                n_wise_energies_T.append(float(e_split[3]))
#        if ('Eref(CAS-CI)') in line:
#            e_ref_split = line.split()
#            e_ref_T = float(e_ref_split[1])
##print (n_wise_energies_T)

#for i in range(n-2):
#    constit_end_S.append(constit_start_S[i] + e_end_S[i+2] - e_start_S[i+2])
#    constit_count_S.append(e_end_S[i+2] - e_start_S[i+2] - 1)
#    constit_end_T.append(constit_start_T[i] + e_end_T[i+2] - e_start_T[i+2])
#    constit_count_T.append(e_end_T[i+2] - e_start_T[i+2] - 1)

# Put energies in array and total
for inc in range(1,n+1):
    e_energies_S.append(np.loadtxt(sys.argv[1], usecols=-1, skiprows=e_start_S[inc-1]+1, max_rows=e_end_S[inc-1]-(e_start_S[inc-1]+1)))
#    e_energies_T.append(np.loadtxt(sys.argv[2], usecols=-1, skiprows=e_start_T[inc-1]+1, max_rows=e_end_T[inc-1]-(e_start_T[inc-1]+1)))
#for i in e_energies_S:
#    print(i)
for inc in range(len(e_energies_S)):
    n_wise_totals_S.append(np.sum(e_energies_S[inc]))
#    n_wise_totals_T.append(np.sum(e_energies_T[inc]))

# Set energies that are zeros to really small
for i in range(len(e_energies_S)):
    e_energies_S[i] = np.where((abs(e_energies_S[i]) > 1e-9), e_energies_S[i], -1e-9)
#for i in range(len(e_energies_T)):
#    e_energies_T[i] = np.where((abs(e_energies_T[i]) > 1e-9), e_energies_T[i], -1e-9)

# Put pairwise constituents into array
#n3_constit_S.append(np.loadtxt(sys.argv[1], usecols=(0,1,2,4,5,6,-1), skiprows=constit_start_S[0]+1, max_rows=constit_count_S[0]))
#n3_constit_S = np.asarray(n3_constit_S).reshape((constit_count_S[0],7))
#n3_constit_T.append(np.loadtxt(sys.argv[2], usecols=(0,1,2,4,5,6,-1), skiprows=constit_start_T[0]+1, max_rows=constit_count_T[0]))
#n3_constit_T = np.asarray(n3_constit_T).reshape((constit_count_T[0],7))
e_energies_S = np.asarray(e_energies_S)
#e_energies_T = np.asarray(e_energies_T)

#tuples_index = list(reversed(range(len(e_energies_S[0]))))
#tuples = [x+int(ncore)+1 for x in tuples_index]
#tuples = [x+int(ncore)+1 for x in list(reversed(range(len(e_energies_S[0]))))]
tuples = (np.arange(len(e_energies_S[0]), 0, -1) + int(ncore)).tolist()
pairs = combinations(tuples,2)
triads = combinations(tuples,3)
tuple_count = len(e_energies_S[0])
pair_count = int(comb(len(e_energies_S[0]),2))
triad_count = int(comb(len(e_energies_S[0]),3))
#print ('tuples_index:\n',tuples_index)
n1_ary = []
print (len(tuples),'tuples')
for i in range(len(tuples)):
    n1_ary.append([])
    n1_ary[i].append(tuples[i])
    n1_ary[i].append(e_energies_S[0][i])
    #print (n1_ary[i])
#print (len(tuples2),'tuples2:')
#for i in range(len(tuples)):
#    n1_ary.append([])
#    n1_ary[i].append(tuples2[i])
#    #n1_ary[i].append(e_energies_S[0][i])
#    print (n1_ary[i])
print (pair_count,'pairs')
pair_ary = []
index = 0
for i,j in list(pairs): 
    #print (i,j) 
    pair_ary.append([])
    pair_ary[index].append(i)
    pair_ary[index].append(j)
    #pair_ary[index].append(e_energies_S[1][index])
    #print (pair_ary[index])
    index+=1
#print (tuple_ary)

pair_ary = np.sort(np.asarray(pair_ary).view('i8,i8'), order=['f1'], axis=0).view(np.int)[::-1]
n2_ary = np.hstack((pair_ary,np.asarray(e_energies_S[1]).reshape(len(e_energies_S[1]),1)))

triad_ary = []
index = 0
for i,j,k in list(triads):
    triad_ary.append([])
    triad_ary[index].append(i)
    triad_ary[index].append(j)
    triad_ary[index].append(k)
    index+=1

triad_ary = sorted(triad_ary,key=lambda x: x[1],reverse=True)
triad_ary = sorted(triad_ary,key=lambda x: x[2],reverse=True)
#print ('triad_ary:')
#for i in triad_ary:
#    print (i)

#print (triad_count,'triads:')
#for triad in triad_ary:
#    print (triad)


print ('Tuples:', len(tuples),' Pairs:', pair_count,' Triads:', triad_count)

# Print body quantities found
#print ('--Singlet Bodies--')
#for inc in range(len(e_energies_S)):
#    print ('Increment',inc+1,'# of bodies =',len(e_energies_S[inc]))
#print ('Totals:',n_wise_terms_S[0],'pairs,',n_wise_terms_S[1],'triads')

#print ('--Triplet Bodies--')
#for inc in range(len(e_energies_T)):
#    print ('Increment',inc+1,'# of bodies =',len(e_energies_T[inc]))
#print ('Totals:',n_wise_terms_T[0],'pairs,',n_wise_terms_T[1],'triads')

#homo_tuple=np.max(n3_constit_S)
#print ('homotuple',homo_tuple)

cfo_total_S=0
cfo_count_S=0
all_total_S=0
#cfo_total_T=0
#cfo_count_T=0
#all_total_T=0
#for i,body in enumerate(n3_constit_S):
#    if homo_tuple in body[0:3]:
#        cfo_total_S+=n3_constit_S[i][-1]
#        cfo_count_S+=1
#    all_total_S+=n3_constit_S[i][-1]
#for i,body in enumerate(n3_constit_T):
#    if homo_tuple in body[0:3]:
#        cfo_total_T+=n3_constit_T[i][-1]
#        cfo_count_T+=1
#    all_total_T+=n3_constit_T[i][-1]

print ('Total E:',all_total_S,'CFO E:',cfo_total_S)

## Put energies from array in text file
#with open('Encx_singlet.txt','w') as f:
#    for inc in range(len(e_energies_S)):
#        N=inc+1
#        f.write('Increment %s\n' % N)
#        for b in range(len(e_energies_S[inc])):
#            f.write('%s\n' % e_energies_S[inc][b])
#        f.write('\n')
#        np.savetxt('data/E%scx_S.csv' % str(inc+1),e_energies_S[inc],delimiter=',')
#with open('Encx_triplet.txt','w') as f:
#    for inc in range(len(e_energies_T)):
#        N=inc+1
#        f.write('Increment %s\n' % N)
#        for b in range(len(e_energies_T[inc])):
#            f.write('%s\n' % e_energies_T[inc][b])
#        f.write('\n')
#        np.savetxt('data/E%scx_T.csv' % str(inc+1),e_energies_T[inc],delimiter=',')

def magnitude(x):
    return np.log10(np.absolute(x))

nrw_bottom = -1
nrw_top = -6
#nrw_bottom = -2
#nrw_top = -5
nrw_step = 1    # testing range
#nrw_step = 0.1  # good range
#nrw_step = 0.05 # excessive range
#nrw_step = 0.01 # ridiculously excessive range
#nrw_step = 0.001 # so i heard u liek excessive...
nrw_points = int(1+(nrw_bottom-nrw_top)/nrw_step)
print ('step:',nrw_step,'points:',nrw_points)
#thresh_scan_narrow = np.logspace(nrw_top,nrw_bottom,nrw_points) 
thresh_scan_custom = 0
thresh_scan_custom = [np.power(10,-3.5),np.power(10,-3.8)]
#thresh_scan_custom = [np.power(10,-4.0),np.power(10,-4.5)]
thresh_scan_narrow = thresh_scan_custom
print ('thresh scan:',thresh_scan_narrow)

bins3 = np.linspace(1,9,17)

sums_over_S = []
sums_over_T = []
sums_under_S = []
sums_under_T = []
count_over_S = []
count_over_T = []
count_under_S = []
count_under_T = []
trues_container_S = []
trues_container_T = []
body_count_S = []
body_count_T = []
n3_over_gaps_per_scale = []
n3_under_gaps_per_scale = []
n3_raw_over_gaps = []
body_count_diff = []
body_count_diff_total = []

#with open('bodies_per_cutoff_S.txt','w') as f:
#    f.write('--Singlet Removed Bodies Per Cutoff--\n')

#with open('bodies_per_cutoff_T.txt','w') as f:
#    f.write('--Triplet Removed Bodies Per Cutoff--\n')

if thresh_scan_custom == 0:
    with open('sig_record.txt','w') as f:
        f.write('--Projected significant terms per cutoff starting at ')
        f.write(datetime.now().strftime("%d/%m/%Y %H:%M:%S"))
        f.write(' with %s total 3-bodies--\n' % (len(triad_ary)))
else:
    with open('sig_record_custom.txt','w') as f:
        f.write('--Projected significant terms per cutoff starting at ')
        f.write(datetime.now().strftime("%d/%m/%Y %H:%M:%S"))
        f.write(' with %s total 3-bodies--\n' % (len(triad_ary)))
sig_at_thresh = []
# Loop over cutoff scan to estimate bodies
for step,i_thresh in enumerate(thresh_scan_narrow):
    #print ('current cutoff:',np.around(np.log10(i_thresh),2))
    sig_counter = 0
    #print ('i_thresh:',i_thresh)
    #for i in range(len(e_energies_S[1])):
    #    print (e_energies_S[1][i])
    for index3 in range(len(triad_ary)):
        #print (triad_ary[index3])
        current_pairs = combinations(triad_ary[index3],2)
        current_pairs_ary = []
        index = 0
        for i,j in list(current_pairs):
            current_pairs_ary.append([])
            current_pairs_ary[index].append(i)
            current_pairs_ary[index].append(j)
            index+=1
        #print (current_pairs_ary)
        connect_counter = 0
        for pair_now in np.asarray(current_pairs_ary):
            #print ('pair_now:',pair_now)
            for i,pair in enumerate(pair_ary):
                #print ('pair:',pair)
                #if pair_now[0] == pair[0]
                #    if pair_now[1] == pair[1]
                #print ('pair_now:',pair_now,'pair',pair)
                if np.array_equal(pair_now,pair):
                    #print ('found a match!', pair, pair_now)
                    if abs(e_energies_S[1][i]) > i_thresh:
                        connect_counter += 1
        if connect_counter > 1:
            sig_counter += 1
    sig_at_thresh.append(sig_counter)
    #print ('sig_counter:',sig_counter)
    if thresh_scan_custom == 0:
        with open('sig_record.txt','a') as f:
            if step != 0:
                f.write('thresh %s has %s significant terms computed by ' % (np.around(np.log10(i_thresh),2),np.around(sig_at_thresh[step],0)))
                f.write(datetime.now().strftime("%d/%m/%Y %H:%M:%S"))
                f.write('\n')
    else:
        with open('sig_record_custom.txt','a') as f:
            f.write('thresh %s has %s significant terms computed by ' % (np.around(np.log10(i_thresh),2),np.around(sig_at_thresh[step],0)))
            f.write(datetime.now().strftime("%d/%m/%Y %H:%M:%S"))
            f.write('\n')

for i in range(len(sig_at_thresh)):
    print ('thresh:',np.around(np.log10(thresh_scan_narrow[i]),2),' significant terms:',np.around(sig_at_thresh[i],0))

if thresh_scan_custom == 0:
    np.savetxt('data/thresh_scan_est.csv',thresh_scan_narrow,delimiter=',')
    np.savetxt('data/sig_at_thresh.csv',sig_at_thresh,delimiter=',')


        #for a in current_pairs_ary[0]:
        #    #print ('pair3:',pair3)
        #    for b in current_pairs_ary[1]:
        #        
        #    for pair2 in pair_ary:
        #        #print ('pair2:',pair2)
        #        if pair3 == pair2:
        #            print ('found a match:',pair3,pair2)


    #for row3 in range(len(triad_ary)):
    #    matches = 0
    #    print (triad_ary[row3])
    #    for index3 in triad_ary[row]:
    #        for row2 in n2_ary
    #    if triad_ary[row][2]
    #    n3_include = np.ma.masked_where(
#
#
#        n3_include = np.ma.masked_where(n2_ary[pair][2] > i_thresh, n2_ary[pair][2])
#        n3_trues.append(np.sum(n3_include.mask))
#        #print (n3_include[pair])
#    n3_trues = np.asarray(n3_trues).reshape(tuples,1)
#    print (n3_trues)
    #trues_container.append(n3_trues)
    #np.savetxt(('data/n3_include_%s.csv',str(-np.around(np.log10(i_thresh),2))),n3_include[step],delimiter=',')
    #np.savetxt('data/n3_include.csv',n3_include[step],delimiter=',')

#print (n3_include)

exit()

for step,i_thresh in enumerate(thresh_scan_narrow):
    #print ('current cutoff:',np.around(np.log10(i_thresh),2))
    n3_trues_S = []

    for row in range(len(n3_constit_S)):
        #print ('i_thresh:',i_thresh,'row:',row,'n3_constit_S[row]',n3_constit_S[row])
        n3_include_S = np.ma.masked_where(n3_constit_S[row][3:6] > i_thresh, n3_constit_S[row][3:6])
        n3_trues_S.append(np.sum(n3_include_S.mask))
    n3_trues_S = np.asarray(n3_trues_S).reshape((constit_count_S[0],1))
    n3_constit_S = np.hstack((n3_constit_S,n3_trues_S))
    trues_container_S.append(n3_trues_S)
    n3_trues_T = []
    for row in range(len(n3_constit_T)):
        n3_include_T = np.ma.masked_where(n3_constit_T[row][3:6] > i_thresh, n3_constit_T[row][3:6])
        n3_trues_T.append(np.sum(n3_include_T.mask))
    n3_trues_T = np.asarray(n3_trues_T).reshape((constit_count_T[0],1))
    n3_constit_T = np.hstack((n3_constit_T,n3_trues_T))
    trues_container_T.append(n3_trues_T)

    sum_over = 0
    sum_under = 0
    count_above = 0
    count_below = 0
    for i, energy in enumerate(e_energies_S[2]):
        if n3_trues_S[i] >= 2:
            sum_over += energy
            count_above += 1
        else:
            sum_under += energy
            count_below += 1

    sums_over_S.append(sum_over)
    sums_under_S.append(sum_under)
    count_over_S.append(count_above)
    count_under_S.append(count_below)
    #print ('S -- power:',np.around(np.log10(i_thresh),1),\
    #    'sum over:',np.format_float_scientific(sum_over,precision=4),\
    #    'sum under:',np.format_float_scientific(sum_under,precision=4),\
    #    'count over:',count_above,'count under:',count_below)
    n3_constit_S = np.delete(n3_constit_S, -1, axis=1)

    sum_over = 0
    sum_under = 0
    count_above = 0
    count_below = 0
    for i, energy in enumerate(e_energies_T[2]):
        if n3_trues_T[i] >= 2:
            sum_over += energy
            count_above += 1
        else:
            sum_under += energy
            count_below += 1
    sums_over_T.append(sum_over)
    sums_under_T.append(sum_under)
    count_over_T.append(count_above)
    count_under_T.append(count_below)
    #print ('T -- power:',np.around(np.log10(i_thresh),1),\
    #    'sum over:',np.format_float_scientific(sum_over,precision=4),\
    #    'sum under:',np.format_float_scientific(sum_under,precision=4),\
    #    'count over:',count_above,'count under:',count_below)
    n3_constit_T = np.delete(n3_constit_T, -1, axis=1)

    n3_over_gaps_per_scale.append(sums_over_T[step]-sums_over_S[step])
    n3_under_gaps_per_scale.append(sums_under_T[step]-sums_under_S[step])
    n3_raw_over_gaps.append((sums_over_T[step]-sums_over_S[step]))

    #print ('thresh:',np.around(np.log10(i_thresh),2))
    #print (sums_over_T[step],'-',sums_over_S[step],'=',sums_over_T[step]-sums_over_S[step])
    #print (sums_over_T[step]*2.1947e5,'-',sums_over_S[step]*2.1947e5,'=',(sums_over_T[step]-sums_over_S[step])*2.1947e5)

    #n3_raw_gaps = np.copy(np.asarray(n3_over_gaps_per_scale)*2.1947e5)
    #n3_raw_gaps = np.asarray(n3_over_gaps_per_scale)*2.1947e5

    # Print bodies removed per cutoff scan, call attention to cutoffs with large jumps
    body_count_S.append(0)
    with open('bodies_per_cutoff_S.txt','a') as f:
        if step != 0:
            f.write('=== removed bodies for %s with total energy %s cm-1 ===\n' % (np.around(np.log10(i_thresh),2),(sums_over_T[-1] - sums_over_S[-1])*2.1947e5))
            body_count_S.append(0)
            f.write('  change in energy since last cutoff: %s mHa\n' % np.around((n3_over_gaps_per_scale[step] - n3_over_gaps_per_scale[step-1]),4))
            if abs(n3_over_gaps_per_scale[step]-n3_over_gaps_per_scale[step-1]) > 1e-4:
                f.write('   *** jump of more than 0.1 mHa found! ***\n') 
            for body in range(len(trues_container_S[0])):
                #print ('body:',body,'true?',trues_container_S[-1][body])
                if trues_container_S[-1][body] <= 1:
                    if trues_container_S[-2][body] >= 2:
                        f.write('%s' % n3_constit_S[body][0:3])
                        body_count_S[step]+=1
                        #print (n3_constit_S[body][0:3])
            if body_count_S[step] == 0:
                f.write('    no bodies removed this cutoff\n\n')
            else:
                f.write('\n    count of removed bodies this cutoff: %s\n\n' % body_count_S[step])
                #for true in range(len(n3_trues_S)):
                #    if trues_container[i] = 

    body_count_T.append(0)
    with open('bodies_per_cutoff_T.txt','a') as f:
        if step != 0:
            f.write('=== removed bodies for %s with total energy %s cm-1 ===\n' % (np.around(np.log10(i_thresh),2),(sums_over_T[-1] - sums_over_S[-1])*2.1947e5))
            body_count_T.append(0)
            f.write('  change in energy since last cutoff: %s mHa\n' % np.around((n3_over_gaps_per_scale[step] - n3_over_gaps_per_scale[step-1]),4))
            if abs(n3_over_gaps_per_scale[step]-n3_over_gaps_per_scale[step-1]) > 1e-4:
                f.write('   *** jump of more than 0.1 mHa found! ***\n') 
            for body in range(len(trues_container_T[0])):
                if trues_container_T[-1][body] <= 1:
                    if trues_container_T[-2][body] >= 2:
                        f.write('%s' % n3_constit_T[body][0:3])
                        body_count_T[step]+=1
            if body_count_T[step] == 0:
                f.write('    no bodies removed this cutoff\n\n')
            else:
                f.write('\n    count of removed bodies this cutoff: %s\n\n' % body_count_T[step])

    body_count_diff.append(body_count_T[step]-body_count_S[step])
    body_count_diff_total.append(np.sum(body_count_diff))

    if sum(body_count_S) != sum(body_count_T):
        #print ('found a mismatched body count at thresh',np.around(np.log10(i_thresh),2),'with',body_count_S[step],'for singlet',body_count_T[step],'for triplet')
        n3_over_gaps_per_scale[step] = n3_over_gaps_per_scale[step-1]

#print ('n3_constit_S[0]:',n3_constit_S[0])
#print ('new_bodies_per_thresh:',new_bodies_per_thresh)

print('body_count_diff\n',body_count_diff)
print('body_count_diff_total\n',body_count_diff_total)

scaled_narrow = -np.array(np.log10(thresh_scan_narrow))

#n3_over_gaps_per_scale = np.array(sums_over_T) - np.array(sums_over_S)
#n3_under_gaps_per_scale = np.array(sums_under_T) - np.array(sums_under_S)
print (sums_over_T[0],'-',sums_over_S[0],'=',n3_over_gaps_per_scale[0])
print (sums_under_T[-1],'-',sums_under_S[-1],'=',n3_under_gaps_per_scale[-1])
n3_over_gaps_per_scale = np.asarray(n3_over_gaps_per_scale)*2.1947e5
n3_under_gaps_per_scale = np.asarray(n3_under_gaps_per_scale)*2.1947e5
n3_raw_over_gaps = np.asarray(n3_raw_over_gaps)*2.1947e5

n3_gap_per_scale=[]
n3_raw_gaps=[]
#print (n_wise_gaps[2]*2.1947e5)
for term in n3_over_gaps_per_scale:
    #print ('term:',term)
    n3_gap_per_scale.append(term+gaps_wn[1]+ref_gap)
for term in n3_raw_over_gaps:
    n3_raw_gaps.append(term+gaps_wn[1]+ref_gap)

with open('gap_scan.txt','w') as f:
    f.write('--Gaps Per Power (cm-1)--\n')
    f.write('power     gap        # over / # under\n')
    for i,i_thresh in enumerate(thresh_scan_narrow):
        f.write('%s  %s  %s  %s\n' % (np.around(np.log10(i_thresh),2),n3_gap_per_scale[i],count_over_S[i],count_under_S[i]))
        #f.write('power:',np.around(np.log10(i_thresh),2),'gap:',n3_gap_per_scale[i], \
        #    'count over:',count_over_S[i],'count under:',count_under_S[i])
with open('gap_scan_raw.txt','w') as f:
    f.write('--Gaps Per Power (cm-1)--\n')
    f.write('power     gap        # over / # under\n')
    for i,i_thresh in enumerate(thresh_scan_narrow):
        f.write('%s  %s  %s  %s\n' % (np.around(np.log10(i_thresh),2),n3_raw_gaps[i],count_over_S[i],count_under_S[i]))

np.save(os.getcwd()+'/data/n3_over_gaps_per_scale.npy',n3_over_gaps_per_scale,allow_pickle=False)
np.save(os.getcwd()+'/data/n3_gap_per_scale.npy',n3_gap_per_scale,allow_pickle=False)
np.save(os.getcwd()+'/data/thresh_scan_narrow.npy',thresh_scan_narrow,allow_pickle=False)
np.save(os.getcwd()+'/data/scaled_narrow.npy',scaled_narrow,allow_pickle=False)
np.save(os.getcwd()+'/data/sums_over_S.npy',sums_over_S,allow_pickle=False)
np.save(os.getcwd()+'/data/sums_over_T.npy',sums_over_T,allow_pickle=False)
np.save(os.getcwd()+'/data/count_over_S.npy',count_over_S,allow_pickle=False)
np.savetxt('data/n3_over_gaps_per_scale.csv',n3_over_gaps_per_scale,delimiter=',')
np.savetxt('data/n3_gap_per_scale.csv',n3_gap_per_scale,delimiter=',')
np.savetxt('data/thresh_scan_narrow.csv',thresh_scan_narrow,delimiter=',')
np.savetxt('data/scaled_narrow.csv',scaled_narrow,delimiter=',')
np.savetxt('data/sums_over_S.csv',sums_over_S,delimiter=',')
np.savetxt('data/sums_over_T.csv',sums_over_T,delimiter=',')
np.savetxt('data/count_over_S.csv',count_over_S,delimiter=',')
np.savetxt('data/n3_raw_gaps.csv',n3_raw_gaps,delimiter=',')
np.savetxt('data/body_count_diff_total.csv',body_count_diff_total,delimiter=',')

exit()

#print ('--Gaps Per Power (cm-1)--')
#print ('power     gap        # over / # under')
#for i,i_thresh in enumerate(thresh_scan_narrow):
#    print (np.around(np.log10(i_thresh),2),n3_gap_per_scale[i],count_over_S[i],count_under_S[i])
    #print ('power:',np.around(np.log10(i_thresh),2),'gap:',n3_gap_per_scale[i], \
    #    'count over:',count_over_S[i],'count under:',count_under_S[i])

#print ('n3_gap_per_scale:',n3_gap_per_scale)
#for inc in range(1,n+1):
#    total_gap+=gaps_wn[inc-1]-ref_gap
#print ('total gap =',total_gap+ref_gap)
#print ('top gap =',n3_over_gaps_per_scale[0]+gaps_wn[1]+gaps_wn[0])
#print ('with ref gap =',n3_over_gaps_per_scale[0]+ref_gap)

window = 0.0002 * 2.1947e5
print ('green window:',window,'cm-1')
#expt_gap_wn = 130 # Zn actual experimental gap in cm-1
expt_gap_wn = 214 # V actual experimental gap in cm-1
expt_gap_kc = expt_gap_wn*2.8591e-3 # convert to cm-1 to kcal/mol
expt_gap_ha = expt_gap_kc*1.5936e-3 # convert kcal/mol to Ha

with open('gap_scan.txt','a') as f:
    f.write('\nexpt gap for reference:\n%s cm-1 \n%s kcal/mol \n%s Ha' % (expt_gap_wn,np.around(expt_gap_kc,4),np.around(expt_gap_ha,6)))

axhline_include = []
for i,term in enumerate(n3_over_gaps_per_scale):
    #print ('checking term:',term,'against:',n3_over_gaps_per_scale[0])
    if abs(n3_over_gaps_per_scale[0])-window <= abs(term) <= abs(n3_over_gaps_per_scale[0])+window:
        #axhline_len += 1/len(n3_over_gaps_per_scale)
        axhline_include.append(scaled_narrow[i])
    else:
        break
print ('axhline_include from',np.around(axhline_include[-1],2),'to',np.around(axhline_include[0],2))
green_top = n3_over_gaps_per_scale[0]+window
green_top_gap = n3_gap_per_scale[0]+window
if (n3_over_gaps_per_scale[0]-window < 0):
    green_bottom = 0
else:
    green_bottom = n3_over_gaps_per_scale[0]-window
#if (n3_gap_per_scale[0]-window < n3_gap_per_scale[-1]):
#    green_bottom_gap = n3_gap_per_scale[-1]
#else:
#    green_bottom_gap = n3_gap_per_scale[0]-window
green_bottom_gap = n3_gap_per_scale[0]-window

# 3s means sum, 3c means count, 3b means both
plt3s, pax3s = plt.subplots()
plt3s_title = ('plot_n3s_diff_'+sys.argv[1])[:-4]
plt3s_label = ('T-S Sum for n=3 Terms from n=2 Terms Above Scanning Threshold')
#plt3s_label = ('n=2->3 check for T-S Sum, total gap='+str(np.around(gaps[2],decimals=2))+'cm-1')
pax3s.fill_between(axhline_include,green_top,green_bottom,color='#53e669')
#pax3s.axhline(y=sums_over[0],color='r',linewidth=20,xmin=0.7,xmax=1)
#pax3s.plot(scaled_narrow,n3_over_gaps_per_scale,label='over thresh diff, full gap='+str(np.around(gaps[2],decimals=2))+'cm-1',color='#2683c6',linewidth=3)
pax3s.plot(scaled_narrow,n3_over_gaps_per_scale,label='over thresh diff',color='#2683c6',linewidth=3)
#pax3s.plot(scaled_narrow,n3_under_gaps_per_scale,label='under',color='#ffd600',linewidth=3)
pax3s.set_title(plt3s_label)
pax3s.set_xlabel('-log10(n=2 check)',fontsize=12)
#pax3s.set_ylabel('T-S sum of n=3 energies (Ha)',fontsize=12)
pax3s.set_ylabel('T-S sum of n=3 energies (cm-1)',fontsize=12)
pax3s.legend(fontsize=12)
#plt3s.subplots_adjust(left=0.15)
plt3s.savefig(plt3s_title+'.png')

# tg for total gap in cm-1
plt3tg, pax3tg = plt.subplots()
plt3tg_title = ('plot_n3tg_diff_'+sys.argv[1])[:-4]
plt3tg_label = ('Total T-S n=3 Gap from n=2 Terms Above Scanning Threshold')
pax3tg.fill_between(axhline_include,green_top_gap,green_bottom_gap,color='#53e669')
pax3tg.axhline(y=expt_gap_wn,color='r',linewidth=3)
pax3tg.plot(scaled_narrow,n3_gap_per_scale,label='gap per thresh',color='#2683c6',linewidth=3)
pax3tg.set_title(plt3tg_label)
pax3tg.set_xlabel('-log10(n=2 check)',fontsize=12)
pax3tg.set_ylabel('Total T-S n=3 Gap (cm-1)',fontsize=12)
#pax3tg.legend(fontsize=12)
plt3tg.savefig(plt3tg_title+'.png')


## smooth interpolated B-Spline (is) version of tg
#snis = np.linspace(1.5,5.5,81) # scaled_narrow interpolated spline
#print ('snis:',snis)
#a_BSpline = interpolate.make_interp_spline(scaled_narrow,n3_gap_per_scale)
#ngis = a_BSpline(snis) # n3_gap_per_scale interpolated spline
#
#plt3is, pax3is = plt.subplots()
#plt3is_title = ('plot_n3is_diff_'+sys.argv[1])[:-4]
#plt3is_label = ('Total T-S n=3 Gap from n=2 Terms Above Scanning Threshold')
##pax3is.fill_between(axhline_include,green_top_gap,green_bottom_gap,color='#53e669')
#pax3is.axhline(y=expt_gap_wn,color='r',linewidth=3)
#pax3is.plot(snis,ngis,label='gap per thresh',color='#2683c6',linewidth=3)
#pax3is.set_title(plt3is_label)
#pax3is.set_xlabel('-log10(n=2 check)',fontsize=12)
#pax3is.set_ylabel('Total T-S n=3 Gap (cm-1)',fontsize=12)
##pax3is.legend(fontsize=12)
#plt3is.savefig(plt3is_title+'.png')


## bar graph with discontinuous discretization
#dis_gaps = [] # dis for discontinuous
#for i in range(len(n3_gap_per_scale)):
#    if (i+1) % 5 == 0:
#        dis_gaps.append(sum(np.asarray(n3_gap_per_scale[i:i+5]))/5)
#
#print ('dis_gaps:\n',dis_gaps)
#
#bar3, bax3 = plt.subplots()
##bax3 = fig.add_axes([0,0,1,1])
#bar3_title = ('bar_n3_diff_'+sys.argv[1])[:-4]
#x_range = np.linspace(1,9,17) # 33 for 0.25
##langs = ['C', 'C++', 'Java', 'Python', 'PHP']
##students = [23,17,35,29,12]
#bax3.bar(x_range,dis_gaps)
#bar3.savefig(bar3_title+'.png')


# kc for kcal/mol
green_top_gap*=2.8591e-3
green_bottom_gap*=2.8591e-3
n3_gap_per_scale = np.asarray(n3_gap_per_scale)*2.8591e-3
print ('expt gap:',expt_gap_kc,'n=3 gap:',n3_gap_per_scale[0],'in kcal/mol')
#print ('--Gaps Per Power (kcal/mol)--')
#print ('power     gap        # over / # under')
#for i,i_thresh in enumerate(thresh_scan_narrow):
#    print (np.around(np.log10(i_thresh),2),n3_gap_per_scale[i],count_over_S[i],count_under_S[i])

plt3kc, pax3kc = plt.subplots()
plt3kc_title = ('plot_n3kc_diff_'+sys.argv[1])[:-4]
plt3kc_label = ('Total T-S n=3 Gap from n=2 Terms Above Scanning Threshold')
pax3kc.fill_between(axhline_include,green_top_gap,green_bottom_gap,color='#53e669')
pax3kc.axhline(y=expt_gap_kc,color='r',linewidth=3)
pax3kc.plot(scaled_narrow,n3_gap_per_scale,label='gap per thresh',color='#2683c6',linewidth=3)
pax3kc.set_title(plt3kc_label)
pax3kc.set_xlabel('-log10(n=2 check)',fontsize=12)
pax3kc.set_ylabel('Total T-S n=3 Gap (kcal/mol)',fontsize=12)
pax3kc.set_ylim(top=0.8,bottom=0.0)
#pax3kc.legend(fontsize=12)
plt3kc.savefig(plt3kc_title+'.png')

## ec for error cutoff
#err_per_body=1e-5
#err_from_terms=[]
#err_per_cutoff=[]
#for i in range(len(count_over_S)):
#    err_from_terms.append(err_per_body*count_over_S[i])
#    err_per_cutoff.append(err_from_terms[i]/thresh_scan_narrow[i])
#    #print ('cutoff',np.log10(thresh_scan_narrow[i]),'has total error of:',err_from_terms[i],'and val on x-axis of',err_per_cutoff[i])
#
#plt3ec, pax3ec = plt.subplots()
#plt3ec_title = ('plot_n3ec_diff_'+sys.argv[1])[:-4]
#plt3ec_label = ('Total T-S n=3 Gap from n=2 Terms Above Scanning Threshold')
##pax3ec.fill_between(axhline_include,green_top_gap,green_bottom_gap,color='#53e669')
#pax3ec.axhline(y=expt_gap_kc,color='r',linewidth=3)
#pax3ec.plot(err_per_cutoff,n3_gap_per_scale,label='gap per thresh',color='#2683c6',linewidth=3)
#pax3ec.set_title(plt3ec_label)
#pax3ec.set_xlabel('(error per body * # of terms at cutoff) / cutoff',fontsize=12)
#pax3ec.set_ylabel('Total T-S n=3 Gap (kcal/mol)',fontsize=12)
##pax3ec.legend(fontsize=12)
#plt3ec.savefig(plt3ec_title+'.png')

# vc for versus cutoff
n3_gap_per_scale = np.asarray(n3_gap_per_scale)*1.5936e-3 # convert kcal/mol to Ha
gap_diff = n3_gap_per_scale - n3_gap_per_scale[0]
diff_per_cutoff=[]
for i in range(len(n3_gap_per_scale)):
    diff_per_cutoff.append(gap_diff[i]/thresh_scan_narrow[i])
    #print ('n3_gap_per_scale:',n3_gap_per_scale[i],'scale',np.around(-np.log10(thresh_scan_narrow[i]),2),'gap_diff:',gap_diff[i],'diff_per_cutoff:',diff_per_cutoff[i])

plt3vc, pax3vc = plt.subplots()
plt3vc_title = ('plot_n3vc_diff_'+sys.argv[1])[:-4]
plt3vc_label = ('Difference in T-S Gap from Total 3-body per 3-body Cutoff')
#pax3vc.fill_between(axhline_include,green_top_gap,green_bottom_gap,color='#53e669')
#pax3vc.axhline(y=expt_gap_ha,color='r',linewidth=3)
pax3vc.plot(scaled_narrow,diff_per_cutoff,label='gap per thresh',color='#2683c6',linewidth=3)
pax3vc.set_title(plt3vc_label)
pax3vc.set_xlabel('-log10(cutoff)',fontsize=12)
pax3vc.set_ylabel('T-S Gap - Total n=3 Gap / cutoff',fontsize=12)
#pax3vc.legend(fontsize=12)
plt3vc.savefig(plt3vc_title+'.png')

